#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd "${APP_HOME:-./}" > /dev/null && pwd -P ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

resolve_gradle_base() {
    base_key=$1
    case "$base_key" in
        GRADLE_USER_HOME)
            if [ -n "$GRADLE_USER_HOME" ]; then
                printf '%s\n' "$GRADLE_USER_HOME"
            else
                printf '%s/.gradle\n' "$HOME"
            fi
            ;;
        PROJECT)
            printf '%s\n' "$APP_HOME"
            ;;
        *)
            if [ -n "$GRADLE_USER_HOME" ]; then
                printf '%s\n' "$GRADLE_USER_HOME"
            else
                printf '%s/.gradle\n' "$HOME"
            fi
            ;;
    esac
}

restore_gradle_wrapper_from_base64() {
    wrapper_jar_path=$1
    if [ -f "$wrapper_jar_path" ]; then
        return 0
    fi

    base64_source="$wrapper_jar_path.base64"
    if [ ! -f "$base64_source" ]; then
        return 1
    fi

    tmp_target="$wrapper_jar_path.tmp"
    if command -v base64 >/dev/null 2>&1; then
        if ! base64 --decode < "$base64_source" > "$tmp_target"; then
            rm -f "$tmp_target"
            return 1
        fi
    elif command -v python3 >/dev/null 2>&1; then
        if ! python3 - "$base64_source" "$tmp_target" <<'PY'
import base64, sys
src, dst = sys.argv[1:3]
with open(src, 'rb') as fh_in, open(dst, 'wb') as fh_out:
    fh_out.write(base64.b64decode(fh_in.read()))
PY
        then
            rm -f "$tmp_target"
            return 1
        fi
    else
        return 1
    fi

    if ! mv "$tmp_target" "$wrapper_jar_path"; then
        rm -f "$tmp_target"
        return 1
    fi

    warn "Gradle wrapper JAR restored from embedded base64 archive"
    return 0
}

use_gradle_java_home() {
    java_home=$1
    if [ -z "$java_home" ]; then
        return 1
    fi
    if [ ! -x "$java_home/bin/java" ]; then
        return 1
    fi

    version_output=$("$java_home/bin/java" -version 2>&1 | head -n 1 | tr -d '\r')
    case "$version_output" in
        *"17"*)
            export ORG_GRADLE_JVM_TOOLCHAIN_INSTALLATIONS_PATHS="$java_home"
            export JAVA_HOME="$java_home"
            export PATH="$java_home/bin:$PATH"
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

ensure_gradle_toolchain_jdk() {
    if [ -n "$ORG_GRADLE_JVM_TOOLCHAIN_INSTALLATIONS_PATHS" ] && [ -x "$ORG_GRADLE_JVM_TOOLCHAIN_INSTALLATIONS_PATHS/bin/java" ]; then
        return 0
    fi

    install_dir="$HOME/.gradle/jdks/temurin-17"
    if use_gradle_java_home "$install_dir"; then
        return 0
    fi

    if use_gradle_java_home "$JAVA_HOME"; then
        return 0
    fi

    if use_gradle_java_home "$JAVA_HOME_17"; then
        return 0
    fi

    if use_gradle_java_home "$JAVA_HOME_17_X64"; then
        return 0
    fi

    if use_gradle_java_home "$JAVA_HOME_17_ARM64"; then
        return 0
    fi

    if command -v java >/dev/null 2>&1; then
        java_path=$(command -v java)
        java_home_candidate=$(cd "$(dirname "$java_path")/.." >/dev/null 2>&1 && pwd -P)
        if use_gradle_java_home "$java_home_candidate"; then
            return 0
        fi
    fi

    os_name=$( uname | tr '[:upper:]' '[:lower:]' )
    arch_name=$( uname -m )

    case "$os_name" in
        linux*) os_token=linux ; archive_ext=tar.gz ;;
        darwin*) os_token=mac ; archive_ext=tar.gz ;;
        msys*|mingw*|cygwin*) os_token=windows ; archive_ext=zip ;;
        *) die "ERROR: Unsupported operating system for automatic JDK download: $os_name" ;;
    esac

    case "$arch_name" in
        x86_64|amd64) arch_token=x64 ;;
        aarch64|arm64) arch_token=aarch64 ;;
        *) die "ERROR: Unsupported CPU architecture for automatic JDK download: $arch_name" ;;
    esac

    tmp_dir=$(mktemp -d 2>/dev/null || mktemp -d -t gradle-jdk)
    if [ ! -d "$tmp_dir" ]; then
        die "ERROR: Could not create temporary directory for JDK download"
    fi

    download_url=""
    if command -v python3 >/dev/null 2>&1; then
        download_url=$(python3 - "$os_token" "$arch_token" <<'PY'
import json, sys, urllib.request
os_token, arch_token = sys.argv[1:3]
url = "https://api.github.com/repos/adoptium/temurin17-binaries/releases/latest"
with urllib.request.urlopen(url, timeout=30) as response:
    release = json.load(response)
for asset in release.get("assets", []):
    name = asset.get("name", "")
    if name.startswith(f"OpenJDK17U-jdk_{arch_token}_{os_token}_hotspot") and name.endswith(('.tar.gz', '.zip')):
        print(asset.get("browser_download_url", ""))
        break
PY
)
    fi

    if [ -z "$download_url" ]; then
        rm -rf "$tmp_dir"
        die "ERROR: Could not determine download URL for JDK 17"
    fi

    archive_path="$tmp_dir/jdk.$archive_ext"

    if command -v curl >/dev/null 2>&1; then
        if ! curl --fail --location --silent --show-error --output "$archive_path" "$download_url"; then
            rm -rf "$tmp_dir"
            die "ERROR: Failed to download JDK 17 from $download_url"
        fi
    elif command -v wget >/dev/null 2>&1; then
        if ! wget -q -O "$archive_path" "$download_url"; then
            rm -rf "$tmp_dir"
            die "ERROR: Failed to download JDK 17 from $download_url"
        fi
    else
        rm -rf "$tmp_dir"
        die "ERROR: Neither curl nor wget is available to download JDK 17"
    fi

    extracted_dir=""
    case "$archive_ext" in
        tar.gz)
            if ! tar -xzf "$archive_path" -C "$tmp_dir"; then
                rm -rf "$tmp_dir"
                die "ERROR: Failed to extract downloaded JDK archive"
            fi
            extracted_dir=$(find "$tmp_dir" -mindepth 1 -maxdepth 1 -type d -name 'jdk-*' | head -n 1)
            ;;
        zip)
            if ! unzip -q "$archive_path" -d "$tmp_dir"; then
                rm -rf "$tmp_dir"
                die "ERROR: Failed to extract downloaded JDK archive"
            fi
            extracted_dir=$(find "$tmp_dir" -mindepth 1 -maxdepth 1 -type d -name 'jdk-*' | head -n 1)
            ;;
    esac

    if [ -z "$extracted_dir" ] || [ ! -d "$extracted_dir" ]; then
        rm -rf "$tmp_dir"
        die "ERROR: Could not locate extracted JDK directory"
    fi

    if ! mkdir -p "$(dirname "$install_dir")"; then
        rm -rf "$tmp_dir"
        die "ERROR: Could not create JDK installation directory"
    fi

    rm -rf "$install_dir"
    if ! mv "$extracted_dir" "$install_dir"; then
        rm -rf "$tmp_dir"
        die "ERROR: Could not install downloaded JDK into $install_dir"
    fi

    rm -rf "$tmp_dir"

    if [ ! -x "$install_dir/bin/java" ]; then
        die "ERROR: Downloaded JDK installation is invalid"
    fi

    export ORG_GRADLE_JVM_TOOLCHAIN_INSTALLATIONS_PATHS="$install_dir"
    export JAVA_HOME="$install_dir"
    export PATH="$install_dir/bin:$PATH"
}

setup_proxy_trust_store() {
    if [ -z "$CODEX_PROXY_CERT" ] || [ ! -f "$CODEX_PROXY_CERT" ]; then
        return 0
    fi

    if [ -z "$JAVA_HOME" ]; then
        return 0
    fi

    cacerts_path="$JAVA_HOME/lib/security/cacerts"
    if [ ! -f "$cacerts_path" ]; then
        return 0
    fi

    trust_store_dir="${GRADLE_USER_HOME:-$HOME/.gradle}/certs"
    trust_store="$trust_store_dir/nova-cacerts.jks"

    if [ ! -d "$trust_store_dir" ]; then
        if ! mkdir -p "$trust_store_dir"; then
            warn "Could not create directory for custom trust store at $trust_store_dir"
            return 0
        fi
    fi

    refresh_store=false
    if [ ! -f "$trust_store" ]; then
        refresh_store=true
    elif [ "$CODEX_PROXY_CERT" -nt "$trust_store" ]; then
        refresh_store=true
    fi

    if [ "$refresh_store" = true ]; then
        tmp_store="$trust_store.tmp"
        if ! cp "$cacerts_path" "$tmp_store"; then
            warn "Failed to copy default cacerts from $cacerts_path"
            rm -f "$tmp_store"
            return 0
        fi

        if ! "$JAVA_HOME/bin/keytool" -importcert -noprompt -trustcacerts \
            -alias codex-proxy-cert \
            -file "$CODEX_PROXY_CERT" \
            -keystore "$tmp_store" \
            -storepass changeit >/dev/null 2>&1; then
            warn "Failed to import proxy certificate from $CODEX_PROXY_CERT into custom trust store"
            rm -f "$tmp_store"
            return 0
        fi

        if ! mv "$tmp_store" "$trust_store"; then
            warn "Failed to finalize custom trust store at $trust_store"
            rm -f "$tmp_store"
            return 0
        fi
    fi

    export NOVAPDF_CUSTOM_TRUST_STORE="$trust_store"
    export NOVAPDF_CUSTOM_TRUST_STORE_PASSWORD="changeit"

    GRADLE_OPTS="${GRADLE_OPTS:-} -Djavax.net.ssl.trustStore=$NOVAPDF_CUSTOM_TRUST_STORE -Djavax.net.ssl.trustStorePassword=$NOVAPDF_CUSTOM_TRUST_STORE_PASSWORD"
    JAVA_OPTS="${JAVA_OPTS:-} -Djavax.net.ssl.trustStore=$NOVAPDF_CUSTOM_TRUST_STORE -Djavax.net.ssl.trustStorePassword=$NOVAPDF_CUSTOM_TRUST_STORE_PASSWORD"
    export GRADLE_OPTS
    export JAVA_OPTS
}


prepare_gradle_execution() {
    properties_file="$APP_HOME/gradle/wrapper/gradle-wrapper.properties"
    if [ ! -f "$properties_file" ]; then
        die "ERROR: Gradle wrapper properties file is missing at $properties_file"
    fi

    distribution_url=$(sed -n 's/^distributionUrl=//p' "$properties_file" | tail -n 1 | tr -d '\r')
    distribution_url=$(printf '%s' "$distribution_url" | sed 's#\\:#:#g')
    if [ -z "$distribution_url" ]; then
        die "ERROR: Could not determine Gradle distribution URL from $properties_file"
    fi

    distribution_base=$(sed -n 's/^distributionBase=//p' "$properties_file" | tail -n 1 | tr -d '\r')
    distribution_path=$(sed -n 's/^distributionPath=//p' "$properties_file" | tail -n 1 | tr -d '\r')
    zip_store_base=$(sed -n 's/^zipStoreBase=//p' "$properties_file" | tail -n 1 | tr -d '\r')
    zip_store_path=$(sed -n 's/^zipStorePath=//p' "$properties_file" | tail -n 1 | tr -d '\r')
    distribution_sha=$(sed -n 's/^distributionSha256Sum=//p' "$properties_file" | tail -n 1 | tr -d '\r')

    distribution_base_dir=$(resolve_gradle_base "$distribution_base")
    zip_store_base_dir=$(resolve_gradle_base "$zip_store_base")

    if [ -z "$distribution_base_dir" ] || [ -z "$zip_store_base_dir" ]; then
        die "ERROR: Could not resolve Gradle wrapper storage directories"
    fi

    distribution_file=${distribution_url##*/}
    distribution_dir=${distribution_file%.zip}

    install_root="$distribution_base_dir/$distribution_path"
    install_dir="$install_root/$distribution_dir"
    gradle_executable="$install_dir/bin/gradle"

    if [ -x "$gradle_executable" ]; then
        printf '%s\n' "$gradle_executable"
        return 0
    fi

    warn "Gradle wrapper JAR missing. Falling back to direct Gradle distribution download from $distribution_url"

    zip_store_dir="$zip_store_base_dir/$zip_store_path"
    distribution_zip="$zip_store_dir/$distribution_file"

    if [ ! -f "$distribution_zip" ]; then
        if ! mkdir -p "$zip_store_dir"; then
            die "ERROR: Could not create directory to store Gradle distribution zip"
        fi

        tmp_zip="$distribution_zip.part"
        if command -v curl >/dev/null 2>&1; then
            if ! curl --fail --location --silent --show-error --output "$tmp_zip" "$distribution_url"; then
                rm -f "$tmp_zip"
                die "ERROR: Failed to download Gradle distribution from $distribution_url"
            fi
        elif command -v wget >/dev/null 2>&1; then
            if ! wget -q -O "$tmp_zip" "$distribution_url"; then
                rm -f "$tmp_zip"
                die "ERROR: Failed to download Gradle distribution from $distribution_url"
            fi
        else
            rm -f "$tmp_zip"
            die "ERROR: Neither curl nor wget is available to download the Gradle distribution"
        fi

        if ! mv "$tmp_zip" "$distribution_zip"; then
            rm -f "$tmp_zip"
            die "ERROR: Could not save downloaded Gradle distribution to $distribution_zip"
        fi
    fi

    if [ -n "$distribution_sha" ]; then
        if command -v sha256sum >/dev/null 2>&1; then
            actual_sha=$(sha256sum "$distribution_zip" | awk '{print $1}')
        elif command -v shasum >/dev/null 2>&1; then
            actual_sha=$(shasum -a 256 "$distribution_zip" | awk '{print $1}')
        else
            warn "Could not verify Gradle distribution checksum: no sha256sum or shasum found"
            actual_sha=$distribution_sha
        fi

        if [ "${actual_sha:-}" != "$distribution_sha" ]; then
            rm -f "$distribution_zip"
            die "ERROR: Gradle distribution checksum mismatch for $distribution_zip"
        fi
    fi

    tmp_dir=$(mktemp -d 2>/dev/null || mktemp -d -t gradle-dist)
    if [ ! -d "$tmp_dir" ]; then
        die "ERROR: Could not create temporary directory to unpack Gradle distribution"
    fi

    if ! unzip -q "$distribution_zip" -d "$tmp_dir"; then
        rm -rf "$tmp_dir"
        die "ERROR: Failed to unpack Gradle distribution archive $distribution_zip"
    fi

    extracted_dir=$(find "$tmp_dir" -mindepth 1 -maxdepth 1 -type d -name 'gradle-*' | head -n 1)
    if [ -z "$extracted_dir" ]; then
        rm -rf "$tmp_dir"
        die "ERROR: Could not locate extracted Gradle directory"
    fi

    if ! mkdir -p "$install_root"; then
        rm -rf "$tmp_dir"
        die "ERROR: Could not create Gradle installation directory at $install_root"
    fi

    rm -rf "$install_dir"
    if ! mv "$extracted_dir" "$install_dir"; then
        rm -rf "$tmp_dir"
        die "ERROR: Could not move Gradle distribution into place"
    fi

    rm -rf "$tmp_dir"

    if [ ! -x "$gradle_executable" ]; then
        die "ERROR: Gradle executable not found after extraction at $gradle_executable"
    fi

    printf '%s\n' "$gradle_executable"
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

wrapper_jar="$APP_HOME/gradle/wrapper/gradle-wrapper.jar"
restore_gradle_wrapper_from_base64 "$wrapper_jar"
ensure_gradle_toolchain_jdk
setup_proxy_trust_store

if [ "${NOVAPDF_FORCE_WRAPPER_JAR:-}" != "true" ]; then
    gradle_cmd=$(prepare_gradle_execution) || exit 1
    if [ -n "$gradle_cmd" ]; then
        exec "$gradle_cmd" "$@"
    fi
fi

if [ ! -f "$wrapper_jar" ]; then
    gradle_cmd=$(prepare_gradle_execution) || exit 1
fi

if [ -n "$gradle_cmd" ]; then
    exec "$gradle_cmd" "$@"
fi

CLASSPATH=$wrapper_jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"
