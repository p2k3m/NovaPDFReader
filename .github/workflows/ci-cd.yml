name: Android CI/CD

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: android-ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    strategy:
      fail-fast: false
      matrix:
        include:
          - api: 34
            avd: pixel7pro_api34
            tag: google_apis
            abi: x86_64
            ram_mb: 6144
            device_id: pixel_7_pro
            device_label: pixel-7-pro
            skin: 1440x3120
            hardware_overrides: |
              hw.device.manufacturer=Google
              hw.device.name=Pixel 7 Pro
              hw.lcd.width=1440
              hw.lcd.height=3120
              hw.lcd.density=512
              hw.displayRegion.0.width=1440
              hw.displayRegion.0.height=3120
              hw.displayRegion.0.xOffset=0
              hw.displayRegion.0.yOffset=0
          - api: 34
            avd: galaxys24ultra_api34
            tag: google_apis
            abi: x86_64
            ram_mb: 8192
            device_id: pixel_7_pro
            device_label: galaxy-s24-ultra
            skin: 1440x3120
            hardware_overrides: |
              hw.device.manufacturer=Samsung
              hw.device.name=Galaxy S24 Ultra
              hw.lcd.width=1440
              hw.lcd.height=3120
              hw.lcd.density=500
              hw.displayRegion.0.width=1440
              hw.displayRegion.0.height=3120
              hw.displayRegion.0.xOffset=0
              hw.displayRegion.0.yOffset=0
          - api: 34
            avd: galaxys23ultra_api34
            tag: google_apis
            abi: x86_64
            ram_mb: 7168
            device_id: pixel_7
            device_label: galaxy-s23-ultra
            skin: 1440x3088
            hardware_overrides: |
              hw.device.manufacturer=Samsung
              hw.device.name=Galaxy S23 Ultra
              hw.lcd.width=1440
              hw.lcd.height=3088
              hw.lcd.density=500
              hw.displayRegion.0.width=1440
              hw.displayRegion.0.height=3088
              hw.displayRegion.0.xOffset=0
              hw.displayRegion.0.yOffset=0
          - api: 34
            avd: pixelfold_api34
            tag: google_apis
            abi: x86_64
            ram_mb: 6144
            device_id: pixel_fold
            device_label: pixel-fold
            skin: 2208x1840
            hardware_overrides: |
              hw.device.manufacturer=Google
              hw.device.name=Pixel Fold
              hw.lcd.width=2208
              hw.lcd.height=1840
              hw.lcd.density=380
              hw.displayRegion.0.width=1840
              hw.displayRegion.0.height=2208
              hw.displayRegion.0.xOffset=0
              hw.displayRegion.0.yOffset=0
          - api: 33
            avd: pixeltablet_api33
            tag: google_apis
            abi: x86_64
            ram_mb: 8192
            device_id: pixel_tablet
            device_label: pixel-tablet
            skin: 2560x1600
            hardware_overrides: |
              hw.device.manufacturer=Google
              hw.device.name=Pixel Tablet
              hw.lcd.width=2560
              hw.lcd.height=1600
              hw.lcd.density=280
              hw.displayRegion.0.width=2560
              hw.displayRegion.0.height=1600
              hw.displayRegion.0.xOffset=0
              hw.displayRegion.0.yOffset=0
    env:
      GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4g"
      ARTIFACTS_DIR: artifacts
      KEYSTORE_PATH: ${{ github.workspace }}/android-release.jks
      SIGNING_KEY_ALIAS: ${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}
      SIGNING_KEY_PASSWORD: ${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}
      SIGNING_STORE_PASSWORD: ${{ secrets.ANDROID_SIGNING_STORE_PASSWORD }}
    steps:
      - name: Validate required secrets
        run: |
          set -e
          missing=false

          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "::error::Missing AWS_ACCESS_KEY_ID secret required for S3 uploads."
            echo "Remediation: Create an access key in AWS IAM (Users → Your deployment user → Security credentials → Create access key) with permissions for the target bucket, then add the value as the AWS_ACCESS_KEY_ID repository secret."
            missing=true
          fi

          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "::error::Missing AWS_SECRET_ACCESS_KEY secret required for S3 uploads."
            echo "Remediation: Copy the secret key generated alongside the IAM access key above and store it as the AWS_SECRET_ACCESS_KEY repository secret. Regenerate the key if it is no longer visible."
            missing=true
          fi

          if [ -z "${{ secrets.S3_BUCKET_NAME }}" ]; then
            echo "::error::Missing S3_BUCKET_NAME secret required for S3 uploads."
            echo "Remediation: Provision an S3 bucket (e.g., nova-pdf-artifacts) in the AWS console, ensure the IAM user has s3:PutObject/s3:ListBucket permissions, then add the bucket name as the S3_BUCKET_NAME repository secret."
            missing=true
          fi

          if [ -z "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ]; then
            echo "::error::Missing ANDROID_KEYSTORE_BASE64 secret required to sign the release bundle."
            echo "Remediation: Generate a release keystore (keytool -genkeypair -v -keystore nova-release.jks -alias nova -keyalg RSA -keysize 4096 -validity 10000), base64 encode it (base64 nova-release.jks), and save the output as the ANDROID_KEYSTORE_BASE64 repository secret."
            missing=true
          fi

          if [ -z "${{ secrets.ANDROID_SIGNING_STORE_PASSWORD }}" ]; then
            echo "::error::Missing ANDROID_SIGNING_STORE_PASSWORD secret required to unlock the keystore."
            echo "Remediation: Store the keystore password selected during key creation as the ANDROID_SIGNING_STORE_PASSWORD repository secret."
            missing=true
          fi

          if [ -z "${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}" ]; then
            echo "::error::Missing ANDROID_SIGNING_KEY_ALIAS secret required for signing."
            echo "Remediation: Record the alias supplied when running keytool (e.g., nova) and add it as the ANDROID_SIGNING_KEY_ALIAS repository secret so Gradle knows which key to use."
            missing=true
          fi

          if [ -z "${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}" ]; then
            echo "::error::Missing ANDROID_SIGNING_KEY_PASSWORD secret required to access the signing key."
            echo "Remediation: Store the key password (often the same as the store password unless you set a separate value) as the ANDROID_SIGNING_KEY_PASSWORD repository secret."
            missing=true
          fi

          if [ "$missing" = true ]; then
            exit 1
          fi
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-
      - name: Grant execute permission for Gradle
        run: chmod +x gradlew
      - name: Decode signing keystore
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          set -euo pipefail
          echo "Decoding Android signing keystore to $KEYSTORE_PATH"
          python3 -c "import base64, os; encoded = os.environ['ANDROID_KEYSTORE_BASE64'].strip().encode(); path = os.environ['KEYSTORE_PATH']; open(path, 'wb').write(base64.b64decode(encoded))"
          chmod 600 "$KEYSTORE_PATH"
      - name: Download Android SDK components
        env:
          API_LEVEL: ${{ matrix.api }}
          ABI: ${{ matrix.abi }}
          TAG: ${{ matrix.tag }}
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-${API_LEVEL}" "system-images;android-${API_LEVEL};${TAG};${ABI}" "build-tools;34.0.0" "emulator"
      - name: Run unit tests
        run: ./gradlew testDebugUnitTest --info
      - name: Start emulator
        env:
          API_LEVEL: ${{ matrix.api }}
          ABI: ${{ matrix.abi }}
          RUNNER_OS: ${{ runner.os }}
        run: |
          set -euo pipefail
          create_cmd=("$ANDROID_HOME/cmdline-tools/latest/bin/avdmanager" create avd -n ${{ matrix.avd }} -k "system-images;android-${API_LEVEL};${{ matrix.tag }};${ABI}" --force)
          if [ -n "${{ matrix.device_id }}" ]; then
            if "$ANDROID_HOME/cmdline-tools/latest/bin/avdmanager" list device | grep -Fq "id: ${{ matrix.device_id }}"; then
              create_cmd+=(--device "${{ matrix.device_id }}")
            else
              echo "Requested device id ${{ matrix.device_id }} not found; proceeding without explicit hardware profile"
            fi
          fi

          if ! printf 'no\n' | "${create_cmd[@]}"; then
            echo "Falling back to default hardware profile for ${{ matrix.avd }}"
            printf 'no\n' | "$ANDROID_HOME/cmdline-tools/latest/bin/avdmanager" create avd -n ${{ matrix.avd }} -k "system-images;android-${API_LEVEL};${{ matrix.tag }};${ABI}" --force
          fi

          sdk_home="${ANDROID_SDK_HOME:-$HOME}"
          config_candidates=()
          if [ -n "${ANDROID_AVD_HOME:-}" ]; then
            config_candidates+=("${ANDROID_AVD_HOME%/}/${{ matrix.avd }}.avd/config.ini")
          fi
          config_candidates+=("${sdk_home%/}/.android/avd/${{ matrix.avd }}.avd/config.ini")
          if [ "$sdk_home" != "$HOME" ]; then
            config_candidates+=("$HOME/.android/avd/${{ matrix.avd }}.avd/config.ini")
          fi

          avd_path=$("$ANDROID_HOME"/cmdline-tools/latest/bin/avdmanager list avd | awk -v avd="${{ matrix.avd }}" 'BEGIN{RS="";FS="\n"} $0 ~ "Name: " avd {for (i = 1; i <= NF; ++i) if ($i ~ /^Path: /) {sub(/^Path: /, "", $i); print $i; exit}}')
          if [ -n "$avd_path" ]; then
            config_candidates+=("${avd_path%/}/config.ini")
          fi

          config_path=""
          for attempt in $(seq 1 30); do
            for candidate in "${config_candidates[@]}"; do
              if [ -f "$candidate" ]; then
                config_path="$candidate"
                break 2
              fi
            done

            # avdmanager occasionally finishes before the config file is flushed to disk
            # which causes flaky failures on CI runners. Wait a moment and retry.
            sleep 2
          done

          if [ -z "$config_path" ]; then
            echo "AVD configuration not found after waiting 60 seconds. Checked:" >&2
            printf '  - %s\n' "${config_candidates[@]}" >&2
            exit 1
          fi
          if [ -n "${{ matrix.hardware_overrides }}" ]; then
            echo "Applying hardware overrides for ${{ matrix.device_label }}"
            printf '%s\n' "${{ matrix.hardware_overrides }}" >> "$config_path"
          fi

          accel_args=()
          if [ "${RUNNER_OS:-}" = "macOS" ]; then
            echo "macOS runners do not expose HVF; starting emulator with -no-accel"
            accel_args=("-no-accel" "-accel" "off")
          elif ! "$ANDROID_HOME"/emulator/emulator-check accel >/dev/null 2>&1; then
            echo "Hardware acceleration unavailable; starting emulator with -no-accel"
            accel_args=("-no-accel" "-accel" "off")
          fi

          $ANDROID_HOME/emulator/emulator -avd ${{ matrix.avd }} -no-snapshot -no-window -gpu swiftshader_indirect -memory ${{ matrix.ram_mb }} -skin ${{ matrix.skin }} -camera-back none -camera-front none -no-boot-anim "${accel_args[@]}" &
          emulator_pid=$!

          device_timeout=0
          while true; do
            if ! kill -0 "$emulator_pid" 2>/dev/null; then
              echo "Emulator process exited before it became available to ADB" >&2
              wait "$emulator_pid" || true
              exit 1
            fi

            if adb devices | awk 'NR>1 && $2 == "device" { exit 0 } END { exit 1 }'; then
              break
            fi

            sleep 5
            device_timeout=$((device_timeout + 5))
            if [ $device_timeout -ge 120 ]; then
              echo "Emulator failed to appear in adb devices output within 2 minutes" >&2
              exit 1
            fi
          done
          boot_timeout=0
          until adb shell getprop sys.boot_completed 2>/dev/null | grep -q "1"; do
            sleep 5
            boot_timeout=$((boot_timeout + 5))
            if ! kill -0 "$emulator_pid" 2>/dev/null; then
              echo "Emulator process exited before boot completed" >&2
              wait "$emulator_pid" || true
              exit 1
            fi
            if [ $boot_timeout -ge 300 ]; then
              echo "Emulator failed to boot within 5 minutes" >&2
              exit 1
            fi
          done
          adb shell settings put global window_animation_scale 0 || true
          adb shell settings put global transition_animation_scale 0 || true
          adb shell settings put global animator_duration_scale 0 || true
          adb shell input keyevent 82 || true
      - name: Run instrumentation tests
        run: ./gradlew connectedAndroidTest --stacktrace
      - name: Capture screenshots
        run: |
          set -euo pipefail

          base_dir="${ARTIFACTS_DIR}/screenshots/api${{ matrix.api }}/${{ matrix.device_label }}"
          mkdir -p "$base_dir"

          adb shell am start -n com.novapdf.reader/.MainActivity
          adb shell settings put system accelerometer_rotation 0 || true
          adb shell settings put system user_rotation 0 || true
          adb shell cmd uimode night no || true
          adb shell settings put secure high_text_contrast_enabled 0 || true
          adb shell settings put secure accessibility_display_daltonizer_enabled 0 || true
          sleep 10

          capture_set() {
            local label="$1"
            local orientation="$2"
            local night_mode="$3"
            local high_contrast="$4"
            local daltonizer="$5"
            local count="$6"

            local target_dir="${base_dir}/${label}"
            mkdir -p "$target_dir"

            if [ "$orientation" = "portrait" ]; then
              adb shell settings put system user_rotation 0 || true
            else
              adb shell settings put system user_rotation 1 || true
            fi

            adb shell cmd uimode night "$night_mode" || true
            adb shell settings put secure high_text_contrast_enabled "$high_contrast" || true

            if [ "$daltonizer" = "none" ]; then
              adb shell settings put secure accessibility_display_daltonizer_enabled 0 || true
            else
              adb shell settings put secure accessibility_display_daltonizer_enabled 1 || true
              adb shell settings put secure accessibility_display_daltonizer "$daltonizer" || true
            fi

            # Allow the UI to settle after changing orientation/theme/accessibility flags
            sleep 4

            for i in $(seq -w 1 "$count"); do
              remote="/sdcard/${label}_${i}.png"
              adb shell screencap -p "$remote"
              adb pull "$remote" "$target_dir/screenshot_${i}.png"
              adb shell rm "$remote" || true
              sleep 1
            done
          }

          capture_set "light-portrait-standard" portrait no 0 none 5
          capture_set "light-portrait-accessibility" portrait no 1 0 4
          capture_set "dark-portrait-standard" portrait yes 0 none 4
          capture_set "dark-landscape-accessibility" landscape yes 1 1 4
          capture_set "light-landscape-standard" landscape no 0 none 3

          adb shell settings put system user_rotation 0 || true
          adb shell cmd uimode night no || true
          adb shell settings put secure high_text_contrast_enabled 0 || true
          adb shell settings put secure accessibility_display_daltonizer_enabled 0 || true
      - name: Collect emulator logs
        if: always()
        run: |
          mkdir -p "${ARTIFACTS_DIR}/logs/api${{ matrix.api }}/${{ matrix.device_label }}"
          adb logcat -d > "${ARTIFACTS_DIR}/logs/api${{ matrix.api }}/${{ matrix.device_label }}/emulator.log" || true
      - name: Stop emulator
        if: always()
        run: adb -s emulator-5554 emu kill || true
      - name: Bundle release app
        run: ./gradlew bundleRelease --stacktrace
      - name: Collect signed release bundle
        run: |
          set -euo pipefail
          bundle_path="app/build/outputs/bundle/release/app-release.aab"
          if [ ! -f "$bundle_path" ]; then
            echo "Bundle not found at $bundle_path" >&2
            exit 1
          fi
          target_dir="${ARTIFACTS_DIR}/bundles/api${{ matrix.api }}/${{ matrix.device_label }}"
          mkdir -p "$target_dir"
          signed_bundle="$target_dir/NovaPDFReader-release-signed-api${{ matrix.api }}-${{ matrix.device_label }}.aab"
          cp "$bundle_path" "$signed_bundle"
          "$ANDROID_HOME"/build-tools/34.0.0/apksigner verify --print-certs "$signed_bundle"
      - name: Stage test and lint reports
        if: always()
        run: |
          mkdir -p "${ARTIFACTS_DIR}/reports/api${{ matrix.api }}/${{ matrix.device_label }}"
          if [ -d app/build/reports ]; then
            if command -v rsync >/dev/null 2>&1; then
              rsync -a app/build/reports/ "${ARTIFACTS_DIR}/reports/api${{ matrix.api }}/${{ matrix.device_label }}/"
            else
              cp -R app/build/reports/. "${ARTIFACTS_DIR}/reports/api${{ matrix.api }}/${{ matrix.device_label }}/"
            fi
          fi
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nova-build-${{ matrix.api }}-${{ matrix.device_label }}
          path: ${{ env.ARTIFACTS_DIR }}
          if-no-files-found: warn
      - name: Install AWS CLI
        run: |
          python3 -m pip install --user awscli
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          if [ -d "$HOME/Library/Python/3.11/bin" ]; then
            echo "$HOME/Library/Python/3.11/bin" >> "$GITHUB_PATH"
          fi
          if [ -d "$HOME/Library/Python/3.12/bin" ]; then
            echo "$HOME/Library/Python/3.12/bin" >> "$GITHUB_PATH"
          fi
      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1
      - name: Upload build outputs to S3
        if: success()
        env:
          BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          S3_PREFIX: ci/${{ github.run_id }}/api${{ matrix.api }}/${{ matrix.device_label }}
        run: |
          set -euo pipefail
          if [ -d "${ARTIFACTS_DIR}/bundles/api${{ matrix.api }}/${{ matrix.device_label }}" ]; then
            aws s3 cp "${ARTIFACTS_DIR}/bundles/api${{ matrix.api }}/${{ matrix.device_label }}/" "s3://${BUCKET}/${S3_PREFIX}/bundle/" --recursive
          fi
          if [ -d "${ARTIFACTS_DIR}/screenshots/api${{ matrix.api }}/${{ matrix.device_label }}" ]; then
            aws s3 cp "${ARTIFACTS_DIR}/screenshots/api${{ matrix.api }}/${{ matrix.device_label }}/" "s3://${BUCKET}/${S3_PREFIX}/screenshots/" --recursive
          fi
          if [ -d "${ARTIFACTS_DIR}/reports/api${{ matrix.api }}/${{ matrix.device_label }}" ]; then
            aws s3 cp "${ARTIFACTS_DIR}/reports/api${{ matrix.api }}/${{ matrix.device_label }}/" "s3://${BUCKET}/${S3_PREFIX}/reports/" --recursive
          fi
          if [ -d "${ARTIFACTS_DIR}/logs/api${{ matrix.api }}/${{ matrix.device_label }}" ]; then
            aws s3 cp "${ARTIFACTS_DIR}/logs/api${{ matrix.api }}/${{ matrix.device_label }}/" "s3://${BUCKET}/${S3_PREFIX}/logs/" --recursive
          fi
